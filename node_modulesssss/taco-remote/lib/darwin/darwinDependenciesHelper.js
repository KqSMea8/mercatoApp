// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
/// <reference path="../../../typings/node.d.ts" />
/// <reference path="../../../typings/Q.d.ts" />
/// <reference path="../../../typings/tacoUtils.d.ts" />
/// <reference path="../../../typings/remotebuild.d.ts" />
"use strict";
var child_process = require("child_process");
var fs = require("fs");
var path = require("path");
var Q = require("q");
var readline = require("readline");
var resources = require("../../resources/resourceManager");
var tacoUtils = require("taco-utils");
var Logger = tacoUtils.Logger;
var UtilHelper = tacoUtils.UtilHelper;
var DarwinDependenciesHelper = (function () {
    function DarwinDependenciesHelper() {
    }
    DarwinDependenciesHelper.askInstallHomebrew = function () {
        var firstRunPath = path.join(UtilHelper.tacoHome, ".taco-remote");
        var isFirstRun = !fs.existsSync(firstRunPath);
        var deferred = Q.defer();
        if (isFirstRun) {
            Logger.log(resources.getString("FirstRunDependencyConfiguration"));
            var readlineInterface = readline.createInterface({ input: process.stdin, output: process.stdout });
            var deferred2 = Q.defer();
            readlineInterface.question(resources.getString("HomebrewInstallationQuery"), function (response) {
                readlineInterface.close();
                var shouldInstall = response === "" || response.trim().toLowerCase().indexOf(resources.getString("HomebrewInstallationQueryResponse")) === 0;
                if (shouldInstall) {
                    DarwinDependenciesHelper.tryInstallHomebrew().then(DarwinDependenciesHelper.tryInstallPackages).then(function () {
                        DarwinDependenciesHelper.verifyPackagesInstalled()
                            .then(function () {
                            Logger.log(resources.getString("HomebrewInstallationSuccess"));
                            deferred2.resolve(true);
                        }, function (error) {
                            Logger.logError(resources.getString("HomebrewPackageVerificationFailed", error));
                            process.exit(1);
                        });
                    }, function (error) {
                        Logger.logError(resources.getString("HomebrewInstallationFailed", error));
                        process.exit(1);
                    });
                }
                else {
                    Logger.log(resources.getString("HomebrewInstallationDeclined", firstRunPath));
                    deferred2.resolve(false);
                }
            });
            deferred2.promise.then(function (shouldInstall) {
                child_process.exec("(DevToolsSecurity -enable || true)", function () {
                    // Write to the file. We don't read the contents, but it may help with user discoverability if they change their mind
                    UtilHelper.createDirectoryIfNecessary(UtilHelper.tacoHome);
                    fs.writeFileSync(firstRunPath, "installHomebrew = " + (shouldInstall ? "yes" : "no") + "\n");
                    deferred.resolve({});
                });
            });
        }
        else {
            deferred.resolve({});
        }
        return deferred.promise;
    };
    DarwinDependenciesHelper.tryInstallHomebrew = function () {
        var homebrewInstalled = Q.defer();
        // We use spawn here rather than exec primarily so we can allow for user-interaction
        var curlInstaller = child_process.spawn("curl", ["-fsSL", "https://raw.githubusercontent.com/Homebrew/install/master/install"]);
        var installHomebrew = child_process.spawn("ruby", ["-"]);
        curlInstaller.stdout.on("data", function (data) {
            installHomebrew.stdin.write(data);
        });
        curlInstaller.on("close", function (code) {
            installHomebrew.stdin.end();
        });
        installHomebrew.stdout.on("data", function (data) {
            Logger.log("" + data);
        });
        installHomebrew.stderr.on("data", function (data) {
            Logger.logError("" + data);
        });
        installHomebrew.on("close", function (code) {
            homebrewInstalled.resolve({});
        });
        installHomebrew.on("error", function (arg) {
            Logger.logError("ERROR: " + JSON.stringify(arg));
            homebrewInstalled.reject(arg);
        });
        return homebrewInstalled.promise;
    };
    DarwinDependenciesHelper.tryInstallPackages = function () {
        // Install these packages if they do not exist.
        // We need to check first since the install will fail if an older version is already installed.
        // ideviceinstaller and ios-webkit-debug-proxy will install libimobiledevice if required
        return Q.denodeify(child_process.exec)("(brew list ideviceinstaller | grep ideviceinstaller > /dev/null || brew install ideviceinstaller) && " +
            "(brew list ios-webkit-debug-proxy | grep ios-webkit-debug-proxy > /dev/null || brew install ios-webkit-debug-proxy)");
    };
    DarwinDependenciesHelper.verifyPackagesInstalled = function () {
        // Verify that both of these can run.
        return Q.denodeify(child_process.exec)("ideviceinstaller -h > /dev/null && ios_webkit_debug_proxy -h > /dev/null");
    };
    return DarwinDependenciesHelper;
}());
module.exports = DarwinDependenciesHelper;

//# sourceMappingURL=darwinDependenciesHelper.js.map
