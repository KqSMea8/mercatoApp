// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
"use strict";
/// <reference path="../../typings/mocha.d.ts" />
var express = require("express");
var fs = require("fs");
var http = require("http");
var expressLogger = require("morgan");
var os = require("os");
var path = require("path");
var rimraf = require("rimraf");
var selftest = require("../lib/selftest");
var TacoRemote = require("../lib/server");
var TacoUtils = require("taco-utils");
var UtilHelper = TacoUtils.UtilHelper;
var macOnlyIt = os.platform() === "darwin" ? it : it.skip;
describe("taco-remote", function () {
    var server;
    var serverMod;
    var serverDir = path.join(os.tmpdir(), "taco-remote", "build");
    var downloadDir = path.join(serverDir, "selftest");
    var modMountPoint = "Test";
    before(function (mocha) {
        process.env["TACO_UNIT_TEST"] = true;
        process.env["TACO_HOME"] = serverDir;
        rimraf.sync(UtilHelper.tacoHome);
        UtilHelper.createDirectoryIfNecessary(UtilHelper.tacoHome);
        var firstRunPath = path.join(UtilHelper.tacoHome, ".taco-remote");
        fs.writeFileSync(firstRunPath, ""); // Just need the file to exist so the test doesn't try to ask us about installing homebrew
        var app = express();
        app.use(expressLogger("dev"));
        UtilHelper.createDirectoryIfNecessary(serverDir);
        UtilHelper.createDirectoryIfNecessary(downloadDir);
        var serverConfig = {
            serverDir: serverDir,
            port: 3000,
            secure: false,
            lang: "en",
            hostname: os.hostname()
        };
        var modConfig = {
            mountPath: modMountPoint
        };
        TacoRemote.create(serverConfig, modConfig, {}).then(function (serverModule) {
            serverMod = serverModule;
            app.use("/" + modMountPoint, serverModule.getRouter());
            server = http.createServer(app);
            server.listen(3000, mocha);
        }).fail(mocha);
    });
    after(function (mocha) {
        if (serverMod) {
            serverMod.shutdown();
        }
        server.close(mocha);
        rimraf(serverDir, function (err) { }); // Not sync, and ignore errors
    });
    macOnlyIt("should successfully build the sample project", function (mocha) {
        var serverUrl = "http://" + os.hostname() + ":3000";
        selftest.test(serverUrl, modMountPoint, downloadDir, false, null).done(function () {
            mocha();
        }, mocha);
    });
    // Note: This test will fail unless it is run from a GUI login, or the user running the test has jumped through some hoops to allow the "codesign" program access to the keychain
    it.skip("should successfully build the sample project for device", function (mocha) {
        var serverUrl = "http://" + os.hostname() + ":3000";
        selftest.test(serverUrl, modMountPoint, downloadDir, true, null).done(function () {
            mocha();
        }, mocha);
    });
});

//# sourceMappingURL=build.js.map
