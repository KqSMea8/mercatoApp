// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
/// <reference path="../typings/node.d.ts" />
/// <reference path="../typings/tacoUtils.d.ts" />
"use strict";
var fs = require("fs");
var path = require("path");
var logger = require("./logger");
var resources = require("./resources/resourceManager");
var Logger = logger.Logger;
var TacoUtility;
(function (TacoUtility) {
    var ProcessLogger = (function () {
        function ProcessLogger() {
            this.stream = null;
        }
        /**
         * Begin logging stdout and stderr of a process to a log file
         *
         * @param {string} logDir Directory to put the log in
         * @param {string} logFileName File name of the log file
         * @param {string} language Language to localize messages about the logging in
         * @param {ChildProcess} proc The process to log
         */
        ProcessLogger.prototype.begin = function (logDir, logFileName, language, proc) {
            var pathToLog = path.join(logDir, logFileName);
            this.stream = fs.createWriteStream(pathToLog);
            this.stream.on("error", function (err) {
                Logger.logError(resources.getStringForLanguage(language, "ProcessLogError", pathToLog, err));
            });
            var me = this;
            proc.stdout.on("data", function (data) {
                me.log(data);
            });
            proc.stderr.on("data", function (data) {
                me.log(data);
            });
            proc.on("exit", function (code) {
                if (code) {
                    me.log(resources.getStringForLanguage(language, "LoggedProcessTerminatedWithCode", code));
                }
                me.end();
            });
        };
        /**
         * Stop logging to a file
         */
        ProcessLogger.prototype.end = function () {
            if (this.stream) {
                this.stream.end();
            }
            this.stream = null;
        };
        ProcessLogger.prototype.log = function (message) {
            if (this.stream) {
                this.stream.write(message);
            }
        };
        return ProcessLogger;
    }());
    TacoUtility.ProcessLogger = ProcessLogger;
})(TacoUtility || (TacoUtility = {}));
module.exports = TacoUtility;

//# sourceMappingURL=processLogger.js.map
