// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="../typings/node.d.ts" />
var os = require("os");
var stream = require("stream");
var Transform = stream.Transform;
var TacoUtility;
(function (TacoUtility) {
    /**
     * This class converts all newlines it encounters to either windows or unix style newlines, depending on the OS
     * Example usage:
     * var nns = new NewlineNormalizerStream();
     * readableStream.pipe(nns).pipe(writableStream);
     */
    var NewlineNormalizerStream = (function (_super) {
        __extends(NewlineNormalizerStream, _super);
        function NewlineNormalizerStream() {
            _super.apply(this, arguments);
        }
        NewlineNormalizerStream.prototype._transform = function (chunk, encoding, callback) {
            // Standardize all line endings first
            var scrubbedInput = chunk.toString().replace(/\r\n/g, "\n");
            // Then convert to the OS dependent newline
            var output = scrubbedInput.replace(/\n/g, os.EOL);
            callback(null, output);
        };
        return NewlineNormalizerStream;
    }(Transform));
    TacoUtility.NewlineNormalizerStream = NewlineNormalizerStream;
})(TacoUtility || (TacoUtility = {}));
module.exports = TacoUtility;

//# sourceMappingURL=newlineNormalizerStream.js.map
