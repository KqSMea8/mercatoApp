// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
"use strict";
var argsHelper = require("./argsHelper");
var ArgsHelper = argsHelper.ArgsHelper;
var TacoUtility;
(function (TacoUtility) {
    var ResourceSet = (function () {
        function ResourceSet(resourceFileName) {
            this.resources = {};
            var self = this;
            var res = require(resourceFileName);
            Object.keys(res).forEach(function (key) {
                self.resources[key] = res[key];
            });
        }
        ResourceSet.prototype.getString = function (id) {
            var optionalArgs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                optionalArgs[_i - 1] = arguments[_i];
            }
            var s = this.resources[id];
            if (!s) {
                return s;
            }
            else if (Array.isArray(s)) {
                // Allow longer resources strings to be specified as a list of strings, which represent multiple lines
                s = s.join("\n");
            }
            var result = s;
            /*All args passed to current function:
            you can call getString('foo', 'bar', 'baz') or getString('foo',['bar', 'baz'])
            and the utility function will extract ['bar', 'baz'] as args in both cases*/
            var args = ArgsHelper.getOptionalArgsArrayFromFunctionCall(arguments, 1);
            if (args) {
                for (var i = 0; i < args.length; i++) {
                    result = result.replace(new RegExp("\\{" + i + "\\}", "g"), args[i]);
                }
            }
            return result;
        };
        return ResourceSet;
    }());
    TacoUtility.ResourceSet = ResourceSet;
})(TacoUtility || (TacoUtility = {}));
module.exports = TacoUtility;

//# sourceMappingURL=resourceSet.js.map
