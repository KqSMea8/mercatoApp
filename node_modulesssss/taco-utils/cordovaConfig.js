// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
"use strict";
/// <reference path="../typings/node.d.ts" />
/// <reference path="../typings/elementtree.d.ts" />
/// <reference path="../typings/unorm.d.ts" />
var et = require("elementtree");
var path = require("path");
/* tslint:disable:no-var-requires */
var unorm = require("unorm"); // Note no import: the compiler will remove the require since we don't use the unorm object, we just need it to add String.normalize
/* tslint:enable:no-var-requires */
var tacoUtility = require("./utilHelper");
var UtilHelper = tacoUtility.UtilHelper;
var TacoUtility;
(function (TacoUtility) {
    var CordovaConfig = (function () {
        function CordovaConfig(configXmlPath) {
            var contents = UtilHelper.readFileContentsSync(configXmlPath, "utf-8");
            this.doc = new et.ElementTree(et.XML(contents));
        }
        /**
         * Helper method to get a CordovaConfig object for a cordova project
         */
        CordovaConfig.getCordovaConfig = function (cordovaDirPath) {
            return new CordovaConfig(path.join(cordovaDirPath, "config.xml"));
        };
        /**
         * Get the package ID
         *
         * @returns {string} The packageID
         */
        CordovaConfig.prototype.id = function () {
            return this.doc.getroot().attrib["id"];
        };
        /**
         * Get the app's Display Name
         *
         * @returns {String} The display name, normalized to NFC
         */
        CordovaConfig.prototype.name = function () {
            var el = this.doc.find("name");
            return el && el.text && el.text.trim().normalize();
        };
        /**
         * Get the package version
         *
         * @returns {string} The version
         */
        CordovaConfig.prototype.version = function () {
            var el = this.doc.getroot();
            return el && el.attrib && el.attrib["version"];
        };
        /**
         * Get the preferences specified in the config
         *
         * @returns {[key: string]: string} A dictionary mapping preference keys to preference values
         */
        CordovaConfig.prototype.preferences = function () {
            var data = {};
            var preferences = this.doc.findall("preference");
            preferences.forEach(function (preference) {
                data[preference.attrib["name"]] = preference.attrib["value"];
            });
            return data;
        };
        /**
         * Get the engines specified in the config
         *
         * @returns {[key: string]: string} A dictionary mapping engine keys to spec values
         */
        CordovaConfig.prototype.engines = function () {
            var data = {};
            var engines = this.doc.findall("engine");
            engines.forEach(function (engine) {
                data[engine.attrib["name"]] = engine.attrib["spec"];
            });
            return data;
        };
        return CordovaConfig;
    }());
    TacoUtility.CordovaConfig = CordovaConfig;
})(TacoUtility || (TacoUtility = {}));
module.exports = TacoUtility;

//# sourceMappingURL=cordovaConfig.js.map
