// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
/// <reference path="../typings/node.d.ts" />
/// <reference path="../typings/npm.d.ts" />
/// <reference path="../typings/q.d.ts" />
"use strict";
var child_process = require("child_process");
var os = require("os");
var Q = require("q");
var TacoUtility;
(function (TacoUtility) {
    var NpmHelper = (function () {
        function NpmHelper() {
        }
        NpmHelper.runNpmCommand = function (npmCommand, args, workingDirectory, commandFlags, logLevel, silent) {
            if (silent === void 0) { silent = false; }
            var spawnArgs = [npmCommand].concat(args).concat(commandFlags || []);
            var options = {
                cwd: workingDirectory,
                stdio: silent ? "pipe" : "inherit"
            };
            var npmExecutableName = "npm" + (os.platform() === "win32" ? ".cmd" : "");
            var npmProcess = child_process.spawn(npmExecutableName, spawnArgs, options);
            var deferred = Q.defer();
            var stdout = "";
            var stderr = "";
            npmProcess.on("error", function (err) { return deferred.reject(err); });
            if (silent) {
                npmProcess.stdout.on("data", function (data) {
                    stdout += data.toString();
                });
                npmProcess.stderr.on("data", function (data) {
                    stderr += data.toString();
                });
            }
            npmProcess.on("exit", function (code, signal) {
                if (code === 0) {
                    deferred.resolve([stdout, stderr]);
                }
                else {
                    deferred.reject(code);
                }
            });
            return deferred.promise;
        };
        NpmHelper.install = function (packageId, workingDirectory, commandFlags, logLevel) {
            return NpmHelper.runNpmCommand("install", [packageId], workingDirectory, commandFlags, logLevel);
        };
        // Returns the output of "npm view" as a javascript object
        NpmHelper.view = function (packageId, fields, workingDirectory, commandFlags, logLevel) {
            var args = [packageId].concat(fields);
            return NpmHelper.runNpmCommand("view", args, workingDirectory, commandFlags, logLevel, /*silent=*/ true)
                .then(function (_a) {
                var stdout = _a[0], stderr = _a[1];
                return JSON.parse(stdout.replace(/'/g, '"'));
            });
        };
        return NpmHelper;
    }());
    TacoUtility.NpmHelper = NpmHelper;
})(TacoUtility || (TacoUtility = {}));
module.exports = TacoUtility;

//# sourceMappingURL=npmHelper.js.map
