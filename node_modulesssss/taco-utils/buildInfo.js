// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
"use strict";
var argsHelper = require("./argsHelper");
var installLogLevel = require("./installLogLevel");
var ArgsHelper = argsHelper.ArgsHelper;
var InstallLogLevel = installLogLevel.InstallLogLevel;
var TacoUtility;
(function (TacoUtility) {
    var BuildInfo = (function () {
        function BuildInfo(params) {
            var self = this;
            Object.keys(params).forEach(function (key) {
                self[key] = params[key];
            });
            this.buildNumber = params.buildNumber;
            this.status = params.status;
            this.buildCommand = params.buildCommand;
            this.configuration = params.configuration;
            this.options = params.options;
            this.buildDir = params.buildDir;
            this.buildLang = params.buildLang;
            this.buildPlatform = params.buildPlatform;
            switch (params.logLevel) {
                case "silent":
                    this.logLevel = InstallLogLevel.silent;
                    break;
                case "warn":
                    this.logLevel = InstallLogLevel.warn;
                    break;
                case "info":
                    this.logLevel = InstallLogLevel.info;
                    break;
                case "verbose":
                    this.logLevel = InstallLogLevel.verbose;
                    break;
                case "silly":
                    this.logLevel = InstallLogLevel.silly;
                    break;
                case "taco":
                    this.logLevel = InstallLogLevel.taco;
                    break;
                default:
                    this.logLevel = InstallLogLevel.undefined;
            }
            this.submissionTime = new Date();
            this.changeList = null;
            this.buildSuccessful = false;
            this.messageId = null;
            this.messageArgs = null;
            this.message = null;
            this.tgzFilePath = null;
            this.appDir = null;
        }
        /**
         * Create a new BuildInfo object out of a raw JS object.
         *
         * @param {Object} buildInfoData An object to convert to a BuildInfo object
         *
         * @returns an instance of BuildInfo with the same keys and values as the input object
         */
        BuildInfo.createNewBuildInfoFromDataObject = function (buildInfoData) {
            var bi = new BuildInfo(buildInfoData);
            Object.keys(buildInfoData).forEach(function (k) {
                bi[k] = buildInfoData[k];
            });
            return bi;
        };
        /**
         * Set the status of the BuildInfo object, along with an optional message
         *
         * @param {string} status The status to set
         * @param {string} messageId Optional message identifier
         * @param {any[]} messageArgs Optional message arguments
         */
        BuildInfo.prototype.updateStatus = function (status, messageId) {
            var messageArgs = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                messageArgs[_i - 2] = arguments[_i];
            }
            this.status = status;
            this.messageId = messageId;
            if (arguments.length > 2) {
                this.messageArgs = ArgsHelper.getOptionalArgsArrayFromFunctionCall(arguments, 2);
            }
            this.statusTime = new Date();
        };
        /**
         * Localize the message of the BuildInfo according to the specified language
         *
         * @param {string or express.Request} req The request or language to localize for
         *
         * @returns This object, after setting the message in the appropriate language.
         */
        BuildInfo.prototype.localize = function (req, resources) {
            if (this.messageId) {
                this.message = resources.getStringForLanguage(req, this.messageId, this.messageArgs);
            }
            else {
                this.message = resources.getStringForLanguage(req, "Build" + this.status);
            }
            return this;
        };
        BuildInfo.UPLOADING = "Uploading";
        BuildInfo.UPLOADED = "Uploaded";
        BuildInfo.EXTRACTED = "Extracted";
        BuildInfo.INVALID = "Invalid";
        BuildInfo.BUILDING = "Building";
        BuildInfo.COMPLETE = "Complete";
        BuildInfo.EMULATED = "Emulated";
        BuildInfo.RUNNING = "Running";
        BuildInfo.CRASHED = "Crashed";
        BuildInfo.TERMINATED = "Terminated";
        BuildInfo.INSTALLED = "Installed";
        BuildInfo.DEBUGGING = "Debugging";
        BuildInfo.DOWNLOADED = "Downloaded";
        BuildInfo.ERROR = "Error";
        return BuildInfo;
    }());
    TacoUtility.BuildInfo = BuildInfo;
})(TacoUtility || (TacoUtility = {}));
module.exports = TacoUtility;

//# sourceMappingURL=buildInfo.js.map
