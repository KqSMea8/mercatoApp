// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
/// <reference path="../typings/colors.d.ts" />
/// <reference path="../typings/commandAlias.d.ts" />
/// <reference path="../typings/commandExample.d.ts" />
/// <reference path="../typings/nameDescription.d.ts" />
/// <reference path="../typings/node.d.ts" />
/// <reference path="../typings/nopt.d.ts" />
/// <reference path="../typings/tacoUtils.d.ts" />
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Q = require("q");
var util = require("util");
var commands = require("./commands");
var cordovaWrapper = require("./cordovaWrapper");
var logger = require("./logger");
var loggerHelper = require("./loggerHelper");
var resources = require("./resources/resourceManager");
var CommandsFactory = commands.Commands.CommandFactory;
var CordovaWrapper = cordovaWrapper.CordovaWrapper;
var TacoCommandBase = commands.Commands.TacoCommandBase;
var Logger = logger.Logger;
var LoggerHelper = loggerHelper.LoggerHelper;
var TacoUtility;
(function (TacoUtility) {
    /*
     * Help
     *
     * handles "Taco Help"
     */
    var HelpCommandBase = (function (_super) {
        __extends(HelpCommandBase, _super);
        function HelpCommandBase(cliName, commandJsonPath, resources) {
            _super.call(this);
            this.commandsFactory = null;
            this.cliResources = null;
            this.cliName = null;
            this.cliName = cliName;
            this.commandsFactory = new CommandsFactory(commandJsonPath);
            this.cliResources = resources;
        }
        HelpCommandBase.prototype.parseArgs = function (args) {
            return { options: {}, original: args, remain: args };
        };
        /**
         * entry point for printing helper
         */
        HelpCommandBase.prototype.runCommand = function () {
            if (this.data.original && this.data.original.length > 0) {
                if (this.commandExists(this.data.original[0])) {
                    this.printCommandUsage(this.data.original[0]);
                }
                else {
                    var args = this.data.original;
                    args.unshift("help");
                    CordovaWrapper.cli(args);
                }
            }
            else {
                this.printGeneralUsage();
            }
            return Q({});
        };
        /**
         * prints out general usage of all support TACO commands, iterates through commands and their descriptions
         */
        HelpCommandBase.prototype.printGeneralUsage = function () {
            var programDescription = this.cliResources.getString("ProgramDescription");
            if (programDescription) {
                Logger.logLine();
                Logger.log(programDescription); // If we have a ProgramDescription we use the new format
                Logger.logLine();
            }
            else {
                Logger.log(resources.getString("CommandHelpUsageSynopsis")); // If not we fall-back to the old synopsis format
            }
            Logger.log(util.format("   <synopsis>%s %s</synopsis><br/>", this.cliName, "<COMMAND>"));
            var nameDescriptionPairs = new Array();
            var listings = this.commandsFactory.listings;
            Object.keys(listings).forEach(function (i) {
                nameDescriptionPairs.push({ name: i, description: listings[i].description, category: listings[i].categoryTitle });
            });
            // we use first entry to conclude if command table has categories
            if (nameDescriptionPairs.length > 0 && !nameDescriptionPairs[0].category) {
                Logger.log(resources.getString("CommandHelpTableTitle"));
            }
            this.printCommandTable(nameDescriptionPairs);
        };
        /**
         * prints out specific usage, i.e. taco help create
         * @param {string} command - TACO command being inquired
         */
        HelpCommandBase.prototype.printCommandUsage = function (command) {
            if (this.commandsFactory.aliases && this.commandsFactory.aliases[command]) {
                command = this.commandsFactory.aliases[command];
            }
            if (!this.commandsFactory.listings || !this.commandsFactory.listings[command]) {
                Logger.logError(resources.getString("CommandHelpBadcomand", "'" + command + "'"));
                this.printGeneralUsage();
                return;
            }
            var list = this.commandsFactory.listings[command];
            this.printCommandHeader(this.cliName, command, list.synopsis, list.description);
            list.args = HelpCommandBase.flattenNameValues(list.args);
            list.options = HelpCommandBase.flattenNameValues(list.options);
            // if both needs to be printed we need to calculate an indent ourselves
            // to make sure args.values have same indenation as options.values
            // we need to also account for extra indenation given to options
            var longestArgsLength = LoggerHelper.getLongestNameLength(list.args);
            var longestOptionsLength = LoggerHelper.getLongestNameLength(list.options);
            var longestKeyLength = Math.max(longestArgsLength, longestOptionsLength + LoggerHelper.DEFAULT_INDENT);
            var indent2 = LoggerHelper.getDescriptionColumnIndent(longestKeyLength);
            if (list.args) {
                Logger.log(resources.getString("CommandHelpUsageParameters"));
                this.printCommandTable(list.args, LoggerHelper.DEFAULT_INDENT, indent2);
            }
            if (list.options) {
                Logger.log(resources.getString("CommandHelpUsageOptions"));
                this.printCommandTable(list.options, 2 * LoggerHelper.DEFAULT_INDENT, indent2);
            }
            if (list.aliases) {
                Logger.log(resources.getString("CommandHelpUsageAliases"));
                this.printAliasTable(list.aliases);
            }
            this.printExamples(list.examples);
            this.printNotes(list.notes);
        };
        HelpCommandBase.prototype.printCommandTable = function (nameDescriptionPairs, indent1, indent2) {
            for (var i = 0; i < nameDescriptionPairs.length; i++) {
                nameDescriptionPairs[i].description = this.getResourceString(nameDescriptionPairs[i].description);
                if (nameDescriptionPairs[i].category) {
                    nameDescriptionPairs[i].category = util.format("<highlight>%s</highlight>", this.getResourceString(nameDescriptionPairs[i].category));
                }
            }
            LoggerHelper.logNameDescriptionTable(nameDescriptionPairs, indent1, indent2);
        };
        HelpCommandBase.prototype.printExamples = function (examples) {
            if (examples) {
                Logger.log(resources.getString("CommandHelpUsageExamples"));
                var indent = LoggerHelper.repeat(" ", LoggerHelper.DEFAULT_INDENT);
                var indent2 = LoggerHelper.repeat(" ", 2 * LoggerHelper.DEFAULT_INDENT);
                for (var i = 0; i < examples.length; i++) {
                    Logger.log(util.format("%s%s %s", indent, HelpCommandBase.DEFAULT_BULLET, this.getResourceString(examples[i].description)));
                    Logger.logLine();
                    if (typeof examples[i].example === "string") {
                        Logger.log(util.format("%s  <highlight>%s</highlight>", indent2, examples[i].example));
                    }
                    else {
                        LoggerHelper.printJson(examples[i].example, 2 * LoggerHelper.DEFAULT_INDENT);
                    }
                    Logger.logLine();
                }
            }
        };
        HelpCommandBase.prototype.printNotes = function (notes) {
            if (notes) {
                Logger.log(resources.getString("CommandHelpUsageNotes"));
                var indent = LoggerHelper.repeat(" ", LoggerHelper.DEFAULT_INDENT);
                for (var i = 0; i < notes.length; i++) {
                    var bullet = (notes.length > 1) ? (i + 1) + "." : HelpCommandBase.DEFAULT_BULLET;
                    Logger.log(util.format("%s%s %s", indent, bullet, this.getResourceString(notes[i])));
                    Logger.logLine();
                }
            }
        };
        HelpCommandBase.prototype.printCommandHeader = function (cliName, commandName, synopsis, description) {
            Logger.logLine();
            if (description) {
                Logger.log(this.getResourceString(description));
            }
            if (synopsis) {
                Logger.logLine();
                var leftIndent = LoggerHelper.repeat(" ", LoggerHelper.DEFAULT_INDENT);
                Logger.log(util.format("%s<synopsis>%s %s %s</synopsis><br/>", leftIndent, cliName, commandName, synopsis));
            }
        };
        HelpCommandBase.prototype.printAliasTable = function (commandAliases) {
            var leftIndent = LoggerHelper.repeat(" ", LoggerHelper.DEFAULT_INDENT);
            Object.keys(commandAliases).forEach(function (cmdKey) {
                var value = commandAliases[cmdKey];
                if (value && value !== cmdKey) {
                    Logger.log(util.format("%s<key>%s</key> %s <key>%s</key>", leftIndent, cmdKey, "->", value));
                }
            });
        };
        /**
         * helper function to strip out square brackets from  ["abc"] and get string from resources.json
         * if no bracket, just return the string
         * @param {string} id - string to get
         */
        HelpCommandBase.prototype.getResourceString = function (id) {
            var regex = new RegExp("(\\[.*\\])");
            var res = this.cliResources;
            return id.replace(regex, function (resourceId) {
                resourceId = resourceId.slice(1, resourceId.length - 1);
                return res.getString(resourceId);
            });
        };
        /**
         * looks up commands.json and see if command is authored as supported
         * @param {string} id - command to query
         */
        HelpCommandBase.prototype.commandExists = function (command) {
            return command in this.commandsFactory.listings || (this.commandsFactory.aliases && command in this.commandsFactory.aliases);
        };
        /**
         * Prepares a flattened list of name/description values of args and options for each of the args.
         */
        HelpCommandBase.flattenNameValues = function (args) {
            if (!args) {
                return undefined;
            }
            var optionsLeftIndent = LoggerHelper.repeat(" ", HelpCommandBase.OPTIONS_INDENT);
            var argList = [];
            args.forEach(function (arg) {
                // Push the arg first
                argList.push({ name: arg.name, description: arg.description });
                if (arg.options) {
                    var options = arg.options;
                    options.forEach(function (nvp) {
                        argList.push({ name: optionsLeftIndent + nvp.name, description: nvp.description });
                    });
                }
            });
            return argList;
        };
        HelpCommandBase.DEFAULT_BULLET = "*";
        HelpCommandBase.OPTIONS_INDENT = 5;
        return HelpCommandBase;
    }(TacoCommandBase));
    TacoUtility.HelpCommandBase = HelpCommandBase;
})(TacoUtility || (TacoUtility = {}));
module.exports = TacoUtility;

//# sourceMappingURL=helpCommandBase.js.map
