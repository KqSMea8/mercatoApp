// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
"use strict";
var util = require("util");
var tacoGlobalConfig = require("./tacoGlobalConfig");
var logLevel = require("./logLevel");
var utilResources = require("./resources/resourceManager");
var LogLevel = logLevel.LogLevel;
var TacoGlobalConfig = tacoGlobalConfig.TacoGlobalConfig;
var TacoUtility;
(function (TacoUtility) {
    (function (TacoErrorLevel) {
        TacoErrorLevel[TacoErrorLevel["Error"] = 0] = "Error";
        TacoErrorLevel[TacoErrorLevel["Warning"] = 1] = "Warning";
    })(TacoUtility.TacoErrorLevel || (TacoUtility.TacoErrorLevel = {}));
    var TacoErrorLevel = TacoUtility.TacoErrorLevel;
    var TacoError = (function () {
        /**
         *
         * @param {number} errorCode  error code for the error say 101
         * @param {string} message user friendly localized error message
         */
        function TacoError(errorCode, name, message, innerError) {
            this.errorCode = errorCode;
            this.message = message;
            this.name = name;
            this.innerError = innerError;
            this.errorLevel = TacoErrorLevel.Error;
        }
        Object.defineProperty(TacoError.prototype, "isTacoError", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        TacoError.getWarning = function (errorToken, resources) {
            var optionalArgs = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                optionalArgs[_i - 2] = arguments[_i];
            }
            var message = resources.getString.apply(resources, [errorToken].concat(optionalArgs));
            // We do not use an error code for Warnings
            var warning = new TacoError(0, errorToken, message);
            warning.errorLevel = TacoErrorLevel.Warning;
            return warning;
        };
        TacoError.getError = function (errorToken, errorCode, resources) {
            var optionalArgs = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                optionalArgs[_i - 3] = arguments[_i];
            }
            return TacoError.wrapError.apply(TacoError, [null, errorToken, errorCode, resources].concat(optionalArgs));
        };
        TacoError.wrapError = function (innerError, errorToken, errorCode, resources) {
            var optionalArgs = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                optionalArgs[_i - 4] = arguments[_i];
            }
            var message = resources.getString.apply(resources, [errorToken].concat(optionalArgs));
            return new TacoError(errorCode, errorToken, message, innerError);
        };
        TacoError.prototype.toString = function () {
            var innerErrorString = "";
            if (this.innerError) {
                var stack = this.innerError.stack;
                if (stack && TacoGlobalConfig.logLevel === LogLevel.Diagnostic) {
                    innerErrorString = utilResources.getString("InnerErrorToString", stack);
                }
                else if (this.innerError.message) {
                    innerErrorString = utilResources.getString("InnerErrorToString", this.innerError.message);
                }
            }
            // Transforms 32 to say "0032" (for fixed width = 4)
            var errorCodeString = (TacoError.ERROR_CODE_FIXED_WIDTH + this.errorCode).slice(-TacoError.ERROR_CODE_FIXED_WIDTH.length);
            return util.format("%s%s: %s\n%s", TacoError.DEFAULT_ERROR_PREFIX, errorCodeString, this.message, innerErrorString);
        };
        TacoError.DEFAULT_ERROR_PREFIX = "TACO";
        TacoError.ERROR_CODE_FIXED_WIDTH = "0000";
        return TacoError;
    }());
    TacoUtility.TacoError = TacoError;
})(TacoUtility || (TacoUtility = {}));
module.exports = TacoUtility;

//# sourceMappingURL=tacoError.js.map
