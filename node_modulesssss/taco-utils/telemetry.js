// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="../typings/node.d.ts" />
/// <reference path="../typings/applicationinsights.d.ts" />
/// <reference path="../typings/winreg.d.ts" />
var appInsights = require("applicationinsights");
var crypto = require("crypto");
var fs = require("fs");
var logFormathelper = require("./logFormatHelper");
var loggerUtil = require("./logger");
var logLevel = require("./logLevel");
var tacoGlobalConfig = require("./tacoGlobalConfig");
var os = require("os");
var path = require("path");
var Q = require("q");
var readline = require("readline");
var sender = require("applicationinsights/Library/Sender");
var telemetryLogger = require("applicationinsights/Library/Logging");
var winreg = require("winreg");
var utilHelper = require("./utilHelper");
var utilResources = require("./resources/resourceManager");
var _ = require("lodash");
var LogFormatHelper = logFormathelper.LogFormatHelper;
var logger = loggerUtil.Logger;
var LogLevel = logLevel.LogLevel;
var TacoGlobalConfig = tacoGlobalConfig.TacoGlobalConfig;
var UtilHelper = utilHelper.UtilHelper;
/**
 * Telemetry module is agnostic to the application using it so functions included here should also conform to that.
 */
var TacoUtility;
(function (TacoUtility) {
    var Telemetry;
    (function (Telemetry) {
        Telemetry.isOptedIn = false;
        ;
        ;
        /**
         * TelemetryEvent represents a basic telemetry data point
         */
        var TelemetryEvent = (function () {
            function TelemetryEvent(name, properties) {
                this.name = name;
                this.properties = properties || {};
                this.eventId = TelemetryUtils.generateGuid();
            }
            TelemetryEvent.prototype.setPiiProperty = function (name, value) {
                var hmac = crypto.createHmac("sha256", new Buffer(TelemetryEvent.PII_HASH_KEY, "utf8"));
                var hashedValue = hmac.update(value).digest("hex");
                this.properties[name] = hashedValue;
                if (Telemetry.isInternal()) {
                    this.properties[name + ".nothashed"] = value;
                }
            };
            TelemetryEvent.PII_HASH_KEY = "959069c9-9e93-4fa1-bf16-3f8120d7db0c";
            return TelemetryEvent;
        }());
        Telemetry.TelemetryEvent = TelemetryEvent;
        ;
        /**
         * TelemetryActivity automatically includes timing data, used for scenarios where we want to track performance.
         * Calls to start() and end() are optional, if not called explicitly then the constructor will be the start and send will be the end.
         * This event will include a property called reserved.activity.duration which represents time in milliseconds.
         */
        var TelemetryActivity = (function (_super) {
            __extends(TelemetryActivity, _super);
            function TelemetryActivity(name, properties) {
                _super.call(this, name, properties);
                this.start();
            }
            TelemetryActivity.prototype.start = function () {
                this.startTime = process.hrtime();
            };
            TelemetryActivity.prototype.end = function () {
                if (!this.endTime) {
                    this.endTime = process.hrtime(this.startTime);
                    // convert [seconds, nanoseconds] to milliseconds and include as property
                    this.properties["reserved.activity.duration"] = this.endTime[0] * 1000 + this.endTime[1] / 1000000;
                }
            };
            return TelemetryActivity;
        }(TelemetryEvent));
        Telemetry.TelemetryActivity = TelemetryActivity;
        ;
        function init(appNameValue, appVersion, telemetryOptions) {
            if (telemetryOptions === void 0) { telemetryOptions = {}; }
            try {
                Telemetry.appName = appNameValue;
                return TelemetryUtils.init(appVersion, telemetryOptions);
            }
            catch (err) {
                if (TacoGlobalConfig.logLevel === LogLevel.Diagnostic && err) {
                    logger.logError(err);
                }
            }
        }
        Telemetry.init = init;
        function send(event, ignoreOptIn) {
            if (ignoreOptIn === void 0) { ignoreOptIn = false; }
            if (Telemetry.isOptedIn || ignoreOptIn) {
                TelemetryUtils.addCommonProperties(event);
                try {
                    if (event instanceof TelemetryActivity) {
                        event.end();
                    }
                    if (appInsights.client) {
                        appInsights.client.trackEvent(event.name, event.properties);
                    }
                }
                catch (err) {
                    if (TacoGlobalConfig.logLevel === LogLevel.Diagnostic && err) {
                        logger.logError(err);
                    }
                }
            }
        }
        Telemetry.send = send;
        function sendPendingData() {
            var defer = Q.defer();
            appInsights.client.sendPendingData(function (result) { return defer.resolve(result); });
            return defer.promise;
        }
        Telemetry.sendPendingData = sendPendingData;
        function isInternal() {
            return TelemetryUtils.userType === TelemetryUtils.USERTYPE_INTERNAL;
        }
        Telemetry.isInternal = isInternal;
        function changeTelemetryOptInSetting() {
            // If user's choice was already collected during initialization
            // for this session, do not prompt again
            if (TelemetryUtils.optInCollectedForCurrentSession) {
                return Q({});
            }
            var currentOptIn = TelemetryUtils.getTelemetryOptInSetting();
            var newOptIn;
            logger.logLine();
            logger.log(utilResources.getString(currentOptIn ? "TelemetryOptInYes" : "TelemetryOptInNo", Telemetry.appName));
            var promptStringId = currentOptIn ? "TelemetryCurrentlyOptedInPrompt" : "TelemetryCurrentlyOptedOutPrompt";
            return TelemetryUtils.getUserConsentForTelemetry(utilResources.getString(promptStringId, Telemetry.appName))
                .then(function (userOptedIn) {
                newOptIn = userOptedIn;
                TelemetryUtils.setTelemetryOptInSetting(newOptIn);
                Telemetry.isOptedIn = newOptIn;
            });
        }
        Telemetry.changeTelemetryOptInSetting = changeTelemetryOptInSetting;
        function getSessionId() {
            return TelemetryUtils.sessionId;
        }
        Telemetry.getSessionId = getSessionId;
        function setSessionId(sessionId) {
            TelemetryUtils.sessionId = sessionId;
        }
        Telemetry.setSessionId = setSessionId;
        var TelemetryUtils = (function () {
            function TelemetryUtils() {
            }
            Object.defineProperty(TelemetryUtils, "telemetrySettingsFile", {
                get: function () {
                    return path.join(UtilHelper.tacoHome, TelemetryUtils.telemetrySettingsFileName);
                },
                enumerable: true,
                configurable: true
            });
            TelemetryUtils.init = function (appVersion, telemetryOptions) {
                TelemetryUtils.telemetrySettingsFileName = telemetryOptions.settingsFileName || TelemetryUtils.DEFAULT_TELEMETRY_SETTINGS_FILENAME;
                TelemetryUtils.loadSettings();
                appInsights.setup(TelemetryUtils.APPINSIGHTS_INSTRUMENTATIONKEY)
                    .setAutoCollectConsole(false)
                    .setAutoCollectRequests(false)
                    .setAutoCollectPerformance(false)
                    .setAutoCollectExceptions(true)
                    .start();
                appInsights.client.config.maxBatchIntervalMs = 100;
                appInsights.client.channel.setOfflineMode(true);
                sender.WAIT_BETWEEN_RESEND = 0;
                telemetryLogger.disableWarnings = true;
                if (appVersion) {
                    var context = appInsights.client.context;
                    context.tags[context.keys.applicationVersion] = appVersion;
                }
                return Q.all([TelemetryUtils.getUserId(), TelemetryUtils.getMachineId()])
                    .spread(function (userId, machineId) {
                    TelemetryUtils.userId = userId;
                    TelemetryUtils.machineId = machineId;
                    TelemetryUtils.sessionId = TelemetryUtils.generateGuid();
                    TelemetryUtils.userType = TelemetryUtils.getUserType();
                }).then(function () {
                    if (_.isUndefined(telemetryOptions.isOptedIn)) {
                        return TelemetryUtils.getOptIn()
                            .then(function (optIn) {
                            Telemetry.isOptedIn = optIn;
                            TelemetryUtils.saveSettings();
                        });
                    }
                    else {
                        Telemetry.isOptedIn = telemetryOptions.isOptedIn;
                        TelemetryUtils.saveSettings();
                        return Q({});
                    }
                });
            };
            TelemetryUtils.addCommonProperties = function (event) {
                if (Telemetry.isOptedIn) {
                    // for the opt out event, don't include tracking properties
                    event.properties["userId"] = TelemetryUtils.userId;
                    event.properties["machineId"] = TelemetryUtils.machineId;
                }
                event.properties["sessionId"] = TelemetryUtils.sessionId;
                event.properties["userType"] = TelemetryUtils.userType;
                event.properties["hostOS"] = os.platform();
                event.properties["hostOSRelease"] = os.release();
            };
            TelemetryUtils.generateGuid = function () {
                var hexValues = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"];
                // c.f. rfc4122 (UUID version 4 = xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx)
                var oct = "";
                var tmp;
                /* tslint:disable:no-bitwise */
                for (var a = 0; a < 4; a++) {
                    tmp = (4294967296 * Math.random()) | 0;
                    oct += hexValues[tmp & 0xF] + hexValues[tmp >> 4 & 0xF] + hexValues[tmp >> 8 & 0xF] + hexValues[tmp >> 12 & 0xF] + hexValues[tmp >> 16 & 0xF] + hexValues[tmp >> 20 & 0xF] + hexValues[tmp >> 24 & 0xF] + hexValues[tmp >> 28 & 0xF];
                }
                // "Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively"
                var clockSequenceHi = hexValues[8 + (Math.random() * 4) | 0];
                return oct.substr(0, 8) + "-" + oct.substr(9, 4) + "-4" + oct.substr(13, 3) + "-" + clockSequenceHi + oct.substr(16, 3) + "-" + oct.substr(19, 12);
                /* tslint:enable:no-bitwise */
            };
            TelemetryUtils.getTelemetryOptInSetting = function () {
                return TelemetryUtils.telemetrySettings.optIn;
            };
            TelemetryUtils.setTelemetryOptInSetting = function (optIn) {
                TelemetryUtils.telemetrySettings.optIn = optIn;
                if (!optIn) {
                    Telemetry.send(new TelemetryEvent(Telemetry.appName + "/telemetryOptOut"), true);
                }
                TelemetryUtils.optInCollectedForCurrentSession = true;
                TelemetryUtils.saveSettings();
            };
            TelemetryUtils.getUserConsentForTelemetry = function (optinMessage) {
                if (optinMessage === void 0) { optinMessage = ""; }
                logger.logLine();
                var deferred = Q.defer();
                var yesOrNoHandler = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false });
                yesOrNoHandler.question(LogFormatHelper.toFormattedString(optinMessage), function (answer) {
                    yesOrNoHandler.close();
                    if (answer && utilResources.getString("PromptResponseYes").toLowerCase().split("\n").indexOf(answer.trim()) !== -1) {
                        deferred.resolve(true);
                    }
                    else {
                        deferred.resolve(false);
                    }
                });
                return deferred.promise;
            };
            TelemetryUtils.getOptIn = function () {
                var optIn = TelemetryUtils.telemetrySettings.optIn;
                if (_.isUndefined(optIn)) {
                    logger.logLine();
                    logger.log(utilResources.getString("TelemetryOptInMessage"));
                    logger.logLine();
                    return TelemetryUtils.getUserConsentForTelemetry(utilResources.getString("TelemetryOptInQuestion"))
                        .then(function (userOptedIn) {
                        optIn = userOptedIn;
                        TelemetryUtils.setTelemetryOptInSetting(optIn);
                        return Q.resolve(optIn);
                    });
                }
                else {
                    return Q.resolve(optIn);
                }
            };
            TelemetryUtils.getUserType = function () {
                var userType = TelemetryUtils.telemetrySettings.userType;
                if (_.isUndefined(userType)) {
                    if (process.env[TelemetryUtils.INTERNAL_USER_ENV_VAR]) {
                        userType = TelemetryUtils.USERTYPE_INTERNAL;
                    }
                    else if (os.platform() === "win32") {
                        var domain = process.env["USERDNSDOMAIN"];
                        domain = domain ? domain.toLowerCase().substring(domain.length - TelemetryUtils.INTERNAL_DOMAIN_SUFFIX.length) : null;
                        userType = domain === TelemetryUtils.INTERNAL_DOMAIN_SUFFIX ? TelemetryUtils.USERTYPE_INTERNAL : TelemetryUtils.USERTYPE_EXTERNAL;
                    }
                    else {
                        userType = TelemetryUtils.USERTYPE_EXTERNAL;
                    }
                    TelemetryUtils.telemetrySettings.userType = userType;
                }
                return userType;
            };
            TelemetryUtils.getRegistryValue = function (key, value, hive) {
                var deferred = Q.defer();
                var regKey = new winreg({
                    hive: hive,
                    key: key
                });
                regKey.get(value, function (err, itemValue) {
                    if (err) {
                        // Fail gracefully by returning null if there was an error.
                        deferred.resolve(null);
                    }
                    else {
                        deferred.resolve(itemValue.value);
                    }
                });
                return deferred.promise;
            };
            /*
             * Load settings data from TACO_HOME/TelemetrySettings.json
             */
            TelemetryUtils.loadSettings = function () {
                try {
                    TelemetryUtils.telemetrySettings = JSON.parse(UtilHelper.readFileContentsSync(TelemetryUtils.telemetrySettingsFile));
                }
                catch (e) {
                    // if file does not exist or fails to parse then assume no settings are saved and start over
                    TelemetryUtils.telemetrySettings = {};
                }
                return TelemetryUtils.telemetrySettings;
            };
            /*
             * Save settings data in TACO_HOME/TelemetrySettings.json
             */
            TelemetryUtils.saveSettings = function () {
                UtilHelper.createDirectoryIfNecessary(UtilHelper.tacoHome);
                fs.writeFileSync(TelemetryUtils.telemetrySettingsFile, JSON.stringify(TelemetryUtils.telemetrySettings));
            };
            TelemetryUtils.getUniqueId = function (regValue, regHive, fallback) {
                var uniqueId;
                var deferred = Q.defer();
                if (os.platform() === "win32") {
                    return TelemetryUtils.getRegistryValue(TelemetryUtils.REGISTRY_SQMCLIENT_NODE, regValue, regHive)
                        .then(function (id) {
                        if (id) {
                            uniqueId = id.replace(/[{}]/g, "");
                            return Q.resolve(uniqueId);
                        }
                        else {
                            return Q.resolve(fallback());
                        }
                    });
                }
                else {
                    return Q.resolve(fallback());
                }
            };
            TelemetryUtils.generateMachineId = function () {
                var macAddress = TelemetryUtils.getMacAddress();
                return crypto.createHash("sha256").update(macAddress, "utf8").digest("hex");
            };
            TelemetryUtils.getMachineId = function () {
                var machineId = TelemetryUtils.telemetrySettings.machineId;
                if (!machineId) {
                    return TelemetryUtils.getUniqueId(TelemetryUtils.REGISTRY_MACHINEID_VALUE, winreg.HKLM, TelemetryUtils.generateMachineId)
                        .then(function (id) {
                        TelemetryUtils.telemetrySettings.machineId = id;
                        return Q.resolve(id);
                    });
                }
                else {
                    TelemetryUtils.telemetrySettings.machineId = machineId;
                    return Q.resolve(machineId);
                }
            };
            TelemetryUtils.getMacAddress = function () {
                var macAddress = "";
                var interfaces = os.networkInterfaces();
                Object.keys(interfaces).some(function (key) {
                    var mac = interfaces[key][0]["mac"];
                    if (mac && mac !== "00:00:00:00:00:00") {
                        macAddress = mac;
                    }
                    return !!macAddress;
                });
                return macAddress;
            };
            TelemetryUtils.getUserId = function () {
                var userId = TelemetryUtils.telemetrySettings.userId;
                if (!userId) {
                    return TelemetryUtils.getUniqueId(TelemetryUtils.REGISTRY_USERID_VALUE, winreg.HKCU, TelemetryUtils.generateGuid)
                        .then(function (id) {
                        TelemetryUtils.telemetrySettings.userId = id;
                        return Q.resolve(id);
                    });
                }
                else {
                    TelemetryUtils.telemetrySettings.userId = userId;
                    return Q.resolve(userId);
                }
            };
            TelemetryUtils.USERTYPE_INTERNAL = "Internal";
            TelemetryUtils.USERTYPE_EXTERNAL = "External";
            TelemetryUtils.telemetrySettings = null;
            TelemetryUtils.DEFAULT_TELEMETRY_SETTINGS_FILENAME = "TelemetrySettings.json";
            TelemetryUtils.APPINSIGHTS_INSTRUMENTATIONKEY = "10baf391-c2e3-4651-a726-e9b25d8470fd";
            TelemetryUtils.REGISTRY_SQMCLIENT_NODE = "\\SOFTWARE\\Microsoft\\SQMClient";
            TelemetryUtils.REGISTRY_USERID_VALUE = "UserId";
            TelemetryUtils.REGISTRY_MACHINEID_VALUE = "MachineId";
            TelemetryUtils.INTERNAL_DOMAIN_SUFFIX = "microsoft.com";
            TelemetryUtils.INTERNAL_USER_ENV_VAR = "TACOINTERNAL";
            return TelemetryUtils;
        }());
        ;
    })(Telemetry = TacoUtility.Telemetry || (TacoUtility.Telemetry = {}));
    ;
})(TacoUtility || (TacoUtility = {}));
module.exports = TacoUtility;

//# sourceMappingURL=telemetry.js.map
