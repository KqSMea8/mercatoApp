// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
"use strict";
var util = require("util");
var logFormathelper = require("./logFormatHelper");
var LogFormatHelper = logFormathelper.LogFormatHelper;
var TacoUtility;
(function (TacoUtility) {
    /**
     * This class converts a given json into a printable well-indented string.
     * Example usage:
     *    var jsonSerializer: JsonSerializer = new JsonSerializer(3, 80, 10);
     *    var json_str:string = jsonSerializer.serialize(obj));
     */
    var JsonSerializer = (function () {
        /**
         * Constructs a JsonSerializer
         * @param {number} Optional, number of spaces (indentation) for every nested level
         * @param {number} Optional, max number of columns allowed in a row
         * @param {number} Optional, initial indentation offset
         */
        function JsonSerializer(indent, maxRight, indentOffset) {
            this.levelIndent = null;
            this.indentOffset = null;
            this.maxRight = 0;
            indent = indent || 0;
            maxRight = maxRight || 0;
            indentOffset = indentOffset || 0;
            this.levelIndent = LogFormatHelper.repeat(" ", indent);
            this.indentOffset = LogFormatHelper.repeat(" ", indentOffset);
            this.maxRight = maxRight;
        }
        JsonSerializer.stringifyKvp = function (key, value) {
            return util.format("%s: %s", JSON.stringify(key), value);
        };
        /**
         * Given a json object returns an indented string
         * @param {object} object to stringify
         */
        JsonSerializer.prototype.serialize = function (obj) {
            return this.indentOffset + this.getIndentedJson(obj, this.indentOffset);
        };
        /**
         * Returns indented json string for a given object
         */
        JsonSerializer.prototype.getIndentedJson = function (obj, indent) {
            if (util.isArray(obj)) {
                var valuesJson = this.getIndentedJsonForArrayValues(obj, indent + this.levelIndent);
                return util.format("[\n%s\n%s]", valuesJson, indent);
            }
            else if (typeof obj === "object") {
                var keyValuesJson = this.getMinifiedJsonForObjectKeys(obj, indent);
                if (keyValuesJson) {
                    return util.format("{ %s }", keyValuesJson);
                }
                keyValuesJson = this.getIndentedJsonForObjectKeys(obj, indent + this.levelIndent);
                return util.format("{\n%s\n%s}", keyValuesJson, indent);
            }
            else {
                return JSON.stringify(obj);
            }
        };
        /**
         * Returns indented json for items in an array
         */
        JsonSerializer.prototype.getIndentedJsonForArrayValues = function (arr, indent) {
            var items = [];
            for (var i = 0; i < arr.length; i++) {
                items.push(this.getIndentedJson(arr[i], indent));
            }
            return items.join(",\n" + indent);
        };
        /**
         * Returns indented json for key/values for an object
         */
        JsonSerializer.prototype.getIndentedJsonForObjectKeys = function (obj, indent) {
            var keyValuePairs = [];
            var keys = Object.keys(obj);
            for (var i = 0; i < keys.length; i++) {
                keyValuePairs.push(JsonSerializer.stringifyKvp(keys[i], this.getIndentedJson(obj[keys[i]], indent)));
            }
            return indent + keyValuePairs.join(",\n" + indent);
        };
        /**
         * Returns key/values for an object on a single line
         * if based on heuristics (nesting levels, json length), stringified version can't fit
         * on a single line, returns null
         */
        JsonSerializer.prototype.getMinifiedJsonForObjectKeys = function (obj, indent) {
            var keys = Object.keys(obj);
            // we don't want to use minified version, if the object is 
            // 1. deep, has nested objects
            // 2. has long values
            // 3. has more than two keys
            if (keys.length > 2) {
                return null;
            }
            var keyValuePairs = [];
            var currentLength = indent.length + 4; // +4 for curly braces and spaces around "{ %s }"
            for (var i = 0; i < keys.length; i++) {
                var valueType = typeof obj[keys[i]];
                // Nested object, not minifiable
                if (valueType === "object") {
                    return null;
                }
                var itemJson = JsonSerializer.stringifyKvp(keys[i], this.getIndentedJson(obj[keys[i]], ""));
                keyValuePairs.push(itemJson);
                currentLength += itemJson.length;
                // +2, for ", " seperator
                // minified version is too long to fit on the screen
                if ((currentLength + 2 * (keyValuePairs.length - 1)) > this.maxRight) {
                    return null;
                }
            }
            return keyValuePairs.join(", ");
        };
        return JsonSerializer;
    }());
    TacoUtility.JsonSerializer = JsonSerializer;
})(TacoUtility || (TacoUtility = {}));
module.exports = TacoUtility;

//# sourceMappingURL=jsonSerializer.js.map
