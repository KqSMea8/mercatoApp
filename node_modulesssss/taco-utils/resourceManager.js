// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
"use strict";
/// <reference path="../typings/node.d.ts" />
var assert = require("assert");
var fs = require("fs");
var path = require("path");
var argsHelper = require("./argsHelper");
var processUtils = require("./processUtils");
var resourceSet = require("./resourceSet");
var tacoGlobalConfig = require("./tacoGlobalConfig");
var ArgsHelper = argsHelper.ArgsHelper;
var TacoGlobalConfig = tacoGlobalConfig.TacoGlobalConfig;
var ResourceSet = resourceSet.ResourceSet;
var TacoUtility;
(function (TacoUtility) {
    var ResourceManager = (function () {
        function ResourceManager(resourcesDirectory, language) {
            this.resourceDirectory = null;
            this.resources = {};
            this.availableLocales = null;
            this.initialLocale = null;
            this.resourceDirectory = resourcesDirectory;
            this.initialLocale = language;
        }
        /**
         * Given an array of locales and list of available locales, walks up the locale chain and
         * returns best matching locale based on available resources
         */
        ResourceManager.getBestAvailableLocale = function (availableLocales, inputLocales) {
            var locale = null;
            // First let's see if there is a locale set at session level 
            // on session object or env var LOCALES
            if (inputLocales) {
                locale = ResourceManager.findMatchingLocale(availableLocales, inputLocales);
            }
            // Next look at our lang global setting
            if (!locale && TacoGlobalConfig.lang) {
                locale = ResourceManager.findMatchingLocale(availableLocales, [TacoGlobalConfig.lang]);
            }
            // Next look at system locale, for UNIX based systems look for LANG variable
            if (!locale && process.env.LANG) {
                locale = ResourceManager.findMatchingLocale(availableLocales, [process.env.LANG]);
            }
            // Finally fallback to DEFAULT_LOCALE ("en")
            if (!locale) {
                locale = ResourceManager.findMatchingLocale(availableLocales, [ResourceManager.DEFAULT_LOCALE]);
            }
            return locale;
        };
        /**
         * Given availableLocales and inputLocales, find the best match
         * preferring specific locales over parent locales ("fr-FR" over "fr")
         */
        ResourceManager.findMatchingLocale = function (availableLocales, inputLocales) {
            var bestLocale = null;
            for (var i = 0; i < inputLocales.length; ++i) {
                var locale = inputLocales[i].toLowerCase();
                if (availableLocales.indexOf(locale) !== -1) {
                    return locale;
                }
                var parentLocale = locale.split("-")[0];
                if (availableLocales.indexOf(parentLocale) !== -1) {
                    // Match on primary language (e.g. it from it-CH). We may find a better match later, so continue looking.
                    bestLocale = parentLocale;
                }
            }
            return bestLocale;
        };
        ResourceManager.getResourceFilePath = function (resourcesDirectory, lang) {
            return path.join(resourcesDirectory, lang, "resources.json");
        };
        ResourceManager.prototype.getString = function (id) {
            var optionalArgs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                optionalArgs[_i - 1] = arguments[_i];
            }
            var args = ArgsHelper.getOptionalArgsArrayFromFunctionCall(arguments, 1);
            var result = this.getStringForLocale(this.bestLanguageMatch(this.getCurrentLocale()), id, args);
            if (result && processUtils.ProcessUtils.getProcess().env["TACO_UNIT_TEST"] === "true") {
                // Mock out resources for consistency in unit tests, but only if they exist
                return id;
            }
            else {
                return result;
            }
        };
        ResourceManager.prototype.getStringForLanguage = function (requestOrAcceptLangs, id) {
            var optionalArgs = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                optionalArgs[_i - 2] = arguments[_i];
            }
            var args = ArgsHelper.getOptionalArgsArrayFromFunctionCall(arguments, 2);
            var result = this.getStringForLocale(this.bestLanguageMatch(requestOrAcceptLangs), id, args);
            if (result && process.env["TACO_UNIT_TEST"]) {
                // Mock out resources for consistency in unit tests, but only if they exist
                return id;
            }
            else {
                return result;
            }
        };
        ResourceManager.prototype.getStringForLocale = function (locale, id) {
            var optionalArgs = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                optionalArgs[_i - 2] = arguments[_i];
            }
            if (id === "") {
                return "";
            }
            var resourceSet = this.getOrCreateResourceSet(locale);
            assert.notEqual(resourceSet, null, "We should get a non-null resource set");
            var args = ArgsHelper.getOptionalArgsArrayFromFunctionCall(arguments, 2);
            return resourceSet.getString(id, args);
        };
        /**
         * self explanatory. Use LANG environment variable otherwise fall back to Default ("en")
         */
        ResourceManager.prototype.getCurrentLocale = function () {
            return (this.initialLocale || TacoGlobalConfig.lang || process.env.LANG || ResourceManager.DEFAULT_LOCALE).toLowerCase();
        };
        /**
         * Given current environment and the CLS session code is executing in
         * creates and returns the corresponding ResourceSet
         */
        ResourceManager.prototype.getOrCreateResourceSet = function (locale) {
            if (!this.resources[locale]) {
                this.ensureResourceSet(locale);
                return this.resources[locale];
            }
            return this.resources[locale];
        };
        /**
         * Creates a new entry in resources for provide locale
         */
        ResourceManager.prototype.ensureResourceSet = function (locale) {
            assert(fs.existsSync(ResourceManager.getResourceFilePath(this.resourceDirectory, locale)));
            if (!this.resources[locale]) {
                this.resources[locale] = new ResourceSet(ResourceManager.getResourceFilePath(this.resourceDirectory, locale));
            }
        };
        /**
         * get list of available resources in given resourcesDirectory
         */
        ResourceManager.prototype.getAvailableLocales = function () {
            if (!this.availableLocales) {
                this.availableLocales = [];
                var self = this;
                fs.readdirSync(this.resourceDirectory).forEach(function (filename) {
                    try {
                        if (fs.existsSync(ResourceManager.getResourceFilePath(self.resourceDirectory, filename))) {
                            self.availableLocales.push(filename);
                        }
                    }
                    catch (e) {
                    }
                });
            }
            return this.availableLocales;
        };
        /**
         * requestOrAcceptLangs can either be:
         * A string, with format "LangSpec[,LangSpec]*" where LangSpec is "Language[;anything]"
         *   e.g. "pl,fr-FR;q=0.3,en-US;q=0.1" is interpreted as "pl" or "fr-FR" or "en-US". Currently we ignore provided quality (q) values
         * An array, which we assume is an array of strings representing languages such as "pl" or "fr-FR"
         * A (express-style) HTTP Request object, with a headers property specifing "accept-language" in a string, as above
         *
         * This allows us to handle simple cases of a single string, as well as more complex cases where a client specifies
         * multiple preferences.
         */
        ResourceManager.prototype.bestLanguageMatch = function (requestOrAcceptLangs) {
            if (Array.isArray(requestOrAcceptLangs)) {
                return ResourceManager.getBestAvailableLocale(this.getAvailableLocales(), requestOrAcceptLangs);
            }
            var langString;
            if (!requestOrAcceptLangs) {
                return ResourceManager.DEFAULT_LOCALE;
            }
            else if (typeof requestOrAcceptLangs === "string") {
                langString = requestOrAcceptLangs;
            }
            else if (requestOrAcceptLangs.headers) {
                langString = requestOrAcceptLangs.headers["accept-language"] || "";
            }
            else {
                throw new Error("Unsupported type of argument for acceptLangs: " + (typeof requestOrAcceptLangs));
            }
            var locales = langString.split(",").map(function (l) { return l.split(";")[0]; });
            return ResourceManager.getBestAvailableLocale(this.getAvailableLocales(), locales);
        };
        ResourceManager.DEFAULT_LOCALE = "en";
        return ResourceManager;
    }());
    TacoUtility.ResourceManager = ResourceManager;
})(TacoUtility || (TacoUtility = {}));
module.exports = TacoUtility;

//# sourceMappingURL=resourceManager.js.map
