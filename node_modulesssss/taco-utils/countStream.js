// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="../typings/node.d.ts" />
var stream = require("stream");
var Transform = stream.Transform;
var TacoUtility;
(function (TacoUtility) {
    /**
     * This class counts how many bytes pass through it in a pipe stream.
     * Example usage:
     * var cs = new CountStream();
     * readableStream.pipe(cs).pipe(writableStream);
     * [... later]
     * console.log(cs.count + " bytes written");
     *
     * Alternatively:
     * CountStream.count(streamToCount, (sz: number) => doSomethingWithStreamSize(sz));
     */
    var CountStream = (function (_super) {
        __extends(CountStream, _super);
        function CountStream(options) {
            _super.call(this, options);
            this.count = 0;
        }
        CountStream.count = function (originalStream, callback) {
            var countedStream = originalStream.pipe(new CountStream());
            countedStream.on("end", function () { return callback(countedStream.count); });
            return countedStream;
        };
        CountStream.prototype._transform = function (chunk, encoding, callback) {
            this.count += chunk.length;
            callback(null, chunk);
        };
        return CountStream;
    }(Transform));
    TacoUtility.CountStream = CountStream;
})(TacoUtility || (TacoUtility = {}));
module.exports = TacoUtility;

//# sourceMappingURL=countStream.js.map
