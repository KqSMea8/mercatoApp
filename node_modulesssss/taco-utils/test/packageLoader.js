// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
/// <reference path="../../typings/should.d.ts"/>
/// <reference path="../../typings/mocha.d.ts"/>
/// <reference path="../../typings/tacoUtils.d.ts" />
"use strict";
var should = require("should");
var Q = require("q");
var fs = require("fs");
var mkdirp = require("mkdirp");
var os = require("os");
var path = require("path");
var rimraf = require("rimraf");
var utils = require("../tacoPackageLoader");
var TacoPackageLoader = utils.TacoPackageLoader;
describe("TacoPackageLoader", function () {
    var testHome = path.join(os.tmpdir(), "taco-utils", "packageLoader");
    before(function () {
        process.env["TACO_HOME"] = testHome;
        rimraf.sync(testHome);
        mkdirp.sync(testHome);
    });
    after(function () {
        rimraf(testHome, function (err) { }); // Not sync, and ignore errors
    });
    it("should load packages from npm", function (done) {
        // is-empty is an arbitrarily chosen fairly small package with no dependencies
        var packageJsonFile = path.join(testHome, "node_modules", "is-empty", "0.0.1", "node_modules", "is-empty", "package.json");
        fs.existsSync(packageJsonFile).should.be.false;
        TacoPackageLoader.lazyRequire("is-empty", "is-empty@0.0.1").then(function (pkg) {
            should(typeof pkg).not.equal("undefined");
            var funcContents = pkg.toString();
            funcContents.should.match(/function isEmpty/);
            fs.existsSync(packageJsonFile).should.be.true;
        }).done(function () {
            done();
        }, done);
    });
    it("should load packages from git", function (done) {
        // is-empty is an arbitrarily chosen fairly small package with no dependencies
        var gitUrl = "https://github.com/ianstormtaylor/is-empty.git";
        var packageJsonFile = path.join(testHome, "node_modules", "is-empty", encodeURIComponent(gitUrl), "node_modules", "is-empty", "package.json");
        fs.existsSync(packageJsonFile).should.be.false;
        TacoPackageLoader.lazyRequire("is-empty", gitUrl).then(function (pkg) {
            should(typeof pkg).not.equal("undefined");
            var funcContents = pkg.toString();
            funcContents.should.match(/function isEmpty/);
            fs.existsSync(packageJsonFile).should.be.true;
        }).done(function () {
            done();
        }, done);
    });
    it("should be able to update npm package", function (done) {
        var packageName = "is-empty";
        var dynamicDependenciesPath = path.join(testHome, "dynamicDependencies.json");
        fs.writeFileSync(dynamicDependenciesPath, "{\"is-empty\": { \"packageName\": \"is-empty\", \"packageId\": \"is-empty@0.0.1\",\"expirationIntervalInHours\": " + 10 / (60 * 60 * 1000) + "}}");
        TacoPackageLoader.lazyTacoRequire("is-empty", dynamicDependenciesPath)
            .then(function () {
            return delay(1000);
        })
            .then(function () {
            return TacoPackageLoader.lazyTacoRequire("is-empty", dynamicDependenciesPath);
        })
            .done(function () {
            done();
        }, done);
    });
    it("should update local expirable package", function (done) {
        var packagePath = path.join(testHome, "foo");
        mkdirp.sync(packagePath);
        var indexJsPath = path.join(packagePath, "index.js");
        fs.writeFileSync(path.join(packagePath, "package.json"), "{ \"name\": \"foo\", \"version\": \"1.0.0\" }");
        fs.writeFileSync(indexJsPath, "module.exports = \"foo\"");
        // add a dynamicDependencies file
        var dynamicDependenciesPath = path.join(testHome, "dynamicDependenciesFoo.json");
        fs.writeFileSync(dynamicDependenciesPath, JSON.stringify({
            foo: {
                packageName: "foo",
                localPath: "file://" + packagePath,
                expirationIntervalInHours: 100 / (60 * 60 * 1000)
            }
        }));
        // 1. require package and verify package exports "foo"
        // 2. update package to export "bar"
        // 3. require again after expiration and verify "bar"
        // 4. update pacakge to export "baz"
        // 5. require again before expiration and verify not "bar"
        TacoPackageLoader.lazyTacoRequire("foo", dynamicDependenciesPath)
            .then(function (pkg) {
            should(typeof pkg).not.equal("undefined");
            pkg.toString().should.equal("foo", "expected foo in installed package");
        })
            .then(function () {
            return Q.denodeify(fs.writeFile)(indexJsPath, "module.exports = \"bar\"");
        })
            .then(function () {
            return delay(1000);
        })
            .then(function () {
            return TacoPackageLoader.lazyTacoRequire("foo", dynamicDependenciesPath);
        })
            .then(function (pkg) {
            should(typeof pkg).not.equal("undefined");
            pkg.toString().should.equal("bar", "expected bar in installed package");
        })
            .then(function () {
            return Q.denodeify(fs.writeFile)(indexJsPath, "module.exports = \"baz\"");
        })
            .then(function () {
            // Minimal delay, should be less than the expiration interval
            return TacoPackageLoader.lazyTacoRequire("foo", dynamicDependenciesPath);
        })
            .then(function (pkg) {
            should(typeof pkg).not.equal("undefined");
            should(pkg.toString()).not.equal("baz", "Didn't expect baz in installed package");
        })
            .done(function () {
            done();
        }, done);
    });
    function delay(ms) {
        var deferred = Q.defer();
        setTimeout(deferred.resolve, ms);
        return deferred.promise;
    }
    ;
});

//# sourceMappingURL=packageLoader.js.map
