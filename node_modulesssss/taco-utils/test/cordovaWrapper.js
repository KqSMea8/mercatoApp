// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
/// <reference path="../../typings/mocha.d.ts" />
/// <reference path="../../typings/node.d.ts" />
/// <reference path="../../typings/should.d.ts" />
/// <reference path="../../typings/cordovaExtensions.d.ts" />
"use strict";
var os = require("os");
var path = require("path");
var Q = require("q");
var should = require("should");
var tacoUtils = require("taco-utils");
var cordovaWrapper = require("../cordovaWrapper");
var projectHelper = require("../projectHelper");
var tacoErrorCodes = require("../tacoErrorCodes");
var TacoTestUtils = require("taco-tests-utils");
var CordovaWrapper = cordovaWrapper.CordovaWrapper;
var MockCordova = TacoTestUtils.MockCordova;
var ProjectHelper = projectHelper.ProjectHelper;
var TacoPackageLoader = tacoUtils.TacoPackageLoader;
var TacoErrorCodes = tacoErrorCodes.TacoErrorCode;
var utils = tacoUtils.UtilHelper;
describe("cordovaWrapper", function () {
    var dummyData = { options: {}, original: [], remain: [] };
    var originalDir;
    before(function (done) {
        var tacoHome = path.join(os.tmpdir(), "taco-cli", "cordovaWrapper");
        var projectHome = path.join(tacoHome, "example");
        utils.createDirectoryIfNecessary(tacoHome);
        utils.createDirectoryIfNecessary(projectHome);
        originalDir = process.cwd();
        process.chdir(projectHome);
        // Set up tests with mocked out Cordova implementation
        var cordova = MockCordova.MockCordova510.getDefault();
        cordova.raw.build = function () {
            throw new Error("Build Error thrown synchronously");
        };
        cordova.raw.run = function () {
            return Q.reject(new Error("Run Rejected Promise"));
        };
        cordova.raw.emulate = function () {
            var deferred = Q.defer();
            setTimeout(function () {
                throw new Error("Emulate Error thrown asynchronously");
            }, 1);
            return deferred.promise;
        };
        TacoPackageLoader.mockForTests = {
            lazyRequire: function (packageName, packageId, logLevel) {
                if (packageName !== "cordova") {
                    return Q.reject(new Error("Expected to load cordova package"));
                }
                return Q(cordova);
            },
            lazyRun: function (packageName, packageId, commandName) { return Q("cordova"); }
        };
        ProjectHelper.createJsonFileWithContents(path.join(projectHome, "taco.json"), { "cordova-cli": "4.3.0" })
            .then(function () { return done(); }, done);
    });
    after(function () {
        tacoUtils.TacoPackageLoader.mockForTests = null;
        process.chdir(originalDir);
    });
    it("should catch synchronous exceptions thrown from cordova", function (done) {
        CordovaWrapper.build(dummyData).then(function () {
            throw new Error("Should have failed with a synchronous exception");
        }, function (err) {
            should(err.message).be.equal("Build Error thrown synchronously");
        }).done(function () { return done(); }, done);
    });
    it("should handle cordova's rejected promises", function (done) {
        CordovaWrapper.run(dummyData).then(function () {
            throw new Error("Should have failed with a rejected promise");
        }, function (err) {
            should(err.message).be.equal("Run Rejected Promise");
        }).done(function () { return done(); }, done);
    });
    it("should catch asynchronous exceptions thrown from cordova", function (done) {
        CordovaWrapper.emulate(dummyData).then(function () {
            throw new Error("Should have failed with an asynchronous exception");
        }, function (err) {
            should(err.errorCode).be.equal(TacoErrorCodes.CordovaCommandUnhandledException);
        }).done(function () { return done(); }, done);
    });
    it("should handle problems launching cordova via the command line", function (done) {
        CordovaWrapper.cli(["fakeCommand"]).then(function () {
            throw new Error("Should have failed");
        }, function (err) {
            err.errorCode.should.be.equal(TacoErrorCodes.CordovaCommandFailed);
        }).done(function () { return done(); }, done);
    });
});

//# sourceMappingURL=cordovaWrapper.js.map
