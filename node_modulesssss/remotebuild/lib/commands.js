// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
/// <reference path="../../typings/node.d.ts" />
/// <reference path="../../typings/Q.d.ts" />
/// <reference path="../../typings/nconf.d.ts" />
/// <reference path="../../typings/remotebuild.d.ts" />
/// <reference path="../../typings/tacoUtils.d.ts" />
"use strict";
var Q = require("q");
var Help = require("./help");
var resources = require("../resources/resourceManager");
var server = require("./server");
var utils = require("taco-utils");
var Logger = utils.Logger;
var Commands = (function () {
    function Commands() {
    }
    Commands.tasks = {
        start: {
            execute: function (config, cliArguments) {
                return server.start(config);
            }
        },
        test: {
            execute: function (config, cliArguments) {
                return server.start(config).then(function () {
                    return server.test(config, cliArguments).finally(function () {
                        server.stop();
                    });
                });
            }
        },
        certificates: {
            execute: function (config, cliArguments) {
                var subCommand = cliArguments[1];
                switch (subCommand) {
                    case "generate":
                        return server.generateClientCert(config);
                    case "reset":
                        return server.resetServerCert(config);
                    default:
                }
                Logger.logError(resources.getString("UnknownCommand", subCommand));
                var topic = "certificates";
                var help = new Help(config);
                return help.run([topic]);
            }
        },
        saveconfig: {
            execute: function (config, cliArguments) {
                return server.saveConfig(config);
            }
        },
        help: {
            execute: function (config, cliArguments) {
                return Q.resolve(null);
            }
        },
        version: {
            execute: function (config, cliArguments) {
                return Q.resolve(null);
            }
        }
    };
    return Commands;
}());
module.exports = Commands;

//# sourceMappingURL=commands.js.map
