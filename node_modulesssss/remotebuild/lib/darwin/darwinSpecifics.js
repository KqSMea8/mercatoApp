// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
/// <reference path="../../../typings/Q.d.ts" />
/// <reference path="../../../typings/tacoUtils.d.ts" />
/// <reference path="../../../typings/express.d.ts" />
/// <reference path="../../../typings/zip-stream.d.ts" />
"use strict";
var fs = require("fs");
var https = require("https");
var path = require("path");
var Q = require("q");
var certs = require("./darwinCerts");
var resources = require("../../resources/resourceManager");
var utils = require("taco-utils");
var Logger = utils.Logger;
var DarwinSpecifics = (function () {
    function DarwinSpecifics() {
    }
    DarwinSpecifics.prototype.defaults = function (base) {
        var osxdefaults = {
            writePidToFile: false,
            lang: process.env.LANG && process.env.LANG.replace(/_/, "-").replace(/\..*/, "") || "en",
            suppressSetupMessage: false
        };
        Object.keys(osxdefaults).forEach(function (key) {
            if (!(key in base)) {
                base[key] = osxdefaults[key];
            }
        });
        return base;
    };
    // Note: we acquire dependencies for deploying and debugging here rather than in taco-remote-lib because it may require user intervention, and taco-remote-lib may be acquired unattended in future.
    DarwinSpecifics.prototype.initialize = function (conf) {
        DarwinSpecifics.config = conf;
        if (process.getuid() === 0) {
            Logger.logWarning(resources.getString("RunningAsRootError"));
            process.exit(1);
        }
        return Q({});
    };
    DarwinSpecifics.prototype.resetServerCert = function (conf) {
        return certs.resetServerCert(conf);
    };
    DarwinSpecifics.prototype.generateClientCert = function (conf) {
        return certs.generateClientCert(conf);
    };
    DarwinSpecifics.prototype.initializeServerCerts = function (conf) {
        return certs.initializeServerCerts(conf);
    };
    DarwinSpecifics.prototype.getServerCerts = function () {
        return certs.getServerCerts();
    };
    DarwinSpecifics.prototype.removeAllCertsSync = function (conf) {
        certs.removeAllCertsSync(conf);
    };
    DarwinSpecifics.prototype.downloadClientCerts = function (req, res) {
        Q.fcall(certs.downloadClientCerts, DarwinSpecifics.config, req.params.pin).then(function (pfxFile) {
            res.sendFile(pfxFile);
        }).catch(function (error) {
            if (error.code) {
                res.status(error.code).send(resources.getStringForLanguage(req, error.id));
            }
            else {
                res.status(404).send(error);
            }
        }).finally(function () {
            certs.invalidatePIN(DarwinSpecifics.config, req.params.pin);
        }).catch(function (err) {
            Logger.logError(err.message);
        }).done();
    };
    DarwinSpecifics.prototype.getHttpsAgent = function (conf) {
        if (conf.secure) {
            conf.set("suppressSetupMessage", true);
            return certs.generateClientCert(conf).then(function (pin) {
                var pfxPath = path.join(conf.serverDir, "certs", "client", pin.toString(), "client.pfx");
                var cert = fs.readFileSync(pfxPath);
                fs.unlinkSync(pfxPath);
                // TODO: Remove the casting once we've get some complete/up-to-date .d.ts files. See https://github.com/Microsoft/TACO/issues/18
                return new https.Agent({ strictSSL: true, pfx: cert });
            });
        }
        else {
            return Q.resolve(null);
        }
    };
    return DarwinSpecifics;
}());
var darwinSpecifics = new DarwinSpecifics();
module.exports = darwinSpecifics;

//# sourceMappingURL=darwinSpecifics.js.map
