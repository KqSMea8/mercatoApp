// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
/// <reference path="../../typings/tacoUtils.d.ts" />
/// <reference path="../../typings/node.d.ts" />
/// <reference path="../../typings/helpCommandBase.d.ts" />
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var path = require("path");
var Q = require("q");
var resources = require("../resources/resourceManager");
var tacoUtility = require("taco-utils");
var HelpCommandBase = tacoUtility.HelpCommandBase;
var Logger = tacoUtility.Logger;
/*
 * Help handles "taco help"
 */
var Help = (function (_super) {
    __extends(Help, _super);
    function Help(remotebuildConf) {
        _super.call(this, Help.cliName, path.join(__dirname, "./commands.json"), require("../resources/resourceManager"));
        this.remotebuildConf = remotebuildConf;
    }
    Help.prototype.run = function (args) {
        var baseRun = _super.prototype.run.bind(this);
        var self = this;
        // for remotebuild help, we always want to show extra comments in the end suggesting users to use 'remotebuild help taco-remote'
        return Q({})
            .then(function () {
            var commands = require("./commands.json").commands;
            var topic = args[0];
            if (!topic || commands[topic]) {
                return baseRun(args);
            }
            var moduleConfig = self.remotebuildConf.moduleConfig(topic);
            if (moduleConfig) {
                try {
                    var mod = require(moduleConfig.requirePath || topic);
                    mod.printHelp(self.remotebuildConf, moduleConfig);
                }
                catch (e) {
                    Logger.logError(resources.getString("UnableToFindModule", topic));
                    return baseRun(Help.defaultCommandData);
                }
            }
            else {
                Logger.logWarning(resources.getString("UnknownCommand", topic));
                return baseRun(Help.defaultCommandData);
            }
            return Q.resolve(null);
        })
            .then(function () {
            if (self.remotebuildConf) {
                Logger.logLine();
                Logger.log(resources.getString("RemoteBuildModuleHelpText", self.remotebuildConf.modules.join(", ")));
            }
        });
    };
    Help.cliName = "remotebuild";
    Help.defaultCommandData = { options: {}, original: [], remain: [] };
    return Help;
}(HelpCommandBase));
module.exports = Help;

//# sourceMappingURL=help.js.map
