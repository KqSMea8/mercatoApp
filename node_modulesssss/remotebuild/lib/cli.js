// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
/// <reference path="../../typings/node.d.ts" />
/// <reference path="../../typings/Q.d.ts" />
/// <reference path="../../typings/nconf.d.ts" />
/// <reference path="../../typings/tacoUtils.d.ts" />
"use strict";
var nconf = require("nconf");
var path = require("path");
var Q = require("q");
var Commands = require("./commands");
var Help = require("./help");
var hostSpecifics = require("./hostSpecifics");
var RemoteBuildConf = require("./remoteBuildConf");
var resources = require("../resources/resourceManager");
var utils = require("taco-utils");
var telemetry = utils.Telemetry;
var HostSpecifics = hostSpecifics.hostSpecifics;
var Logger = utils.Logger;
var UtilHelper = utils.UtilHelper;
var CliHelper = (function () {
    function CliHelper() {
    }
    CliHelper.cli = function () {
        var args = process.argv.slice(2);
        var remotebuildConf = null;
        Q({})
            .then(function () {
            // if version flag found, show version and exit
            CliHelper.handleVersionFlag(args);
        })
            .then(function () {
            return telemetry.init("REMOTEBUILD", require("../package.json").version, { settingsFileName: "RemotebuildTelemetrySettings.json" });
        })
            .then(function () {
            remotebuildConf = CliHelper.parseRemoteBuildConf();
            // if help flag is found, show help and exit
            return CliHelper.handleHelpFlag(args, remotebuildConf);
        })
            .then(function () {
            var command = nconf.get("_")[0] || "start";
            var task = Commands.tasks[command];
            if (!task) {
                Logger.logError(resources.getString("UnknownCommand", command));
                return CliHelper.printHelp(remotebuildConf)
                    .then(function () {
                    process.exit(0);
                });
            }
            return HostSpecifics.initialize(remotebuildConf)
                .then(function () {
                return task.execute(remotebuildConf, args);
            });
        })
            .done();
    };
    CliHelper.parseRemoteBuildConf = function () {
        // Configuration preference: command line, then anything in a config file if specified by the --config arg, then some defaults for options not yet set
        nconf.argv();
        // Default to using TACO_HOME/RemoteBuild.config
        // If that file doesn't exist, then this will be equivalent to nconf.use("memory") as long as we don't try to save it out
        var configFile = nconf.get("config") || path.join(UtilHelper.tacoHome, "RemoteBuild.config");
        var configDir = path.dirname(configFile);
        UtilHelper.createDirectoryIfNecessary(configDir);
        nconf.file({ file: configFile });
        return new RemoteBuildConf(nconf);
    };
    CliHelper.handleVersionFlag = function (args) {
        if (UtilHelper.tryParseVersionArgs(args)) {
            Logger.log("Copyright (C) 2014-2015 Microsoft Corporation. All rights reserved.");
            Logger.log(require("../package").version);
            Logger.logLine();
            process.exit(0);
        }
    };
    CliHelper.handleHelpFlag = function (args, remotebuildConf) {
        var helpArgs = UtilHelper.tryParseHelpArgs(args);
        if (helpArgs) {
            return CliHelper.printHelp(remotebuildConf, helpArgs.helpTopic)
                .then(function () {
                process.exit(0);
            });
        }
        return Q.resolve(null);
    };
    CliHelper.printHelp = function (remotebuildConf, topic) {
        var help = new Help(remotebuildConf);
        return help.run(topic ? [topic] : []);
    };
    return CliHelper;
}());
var cli = CliHelper.cli;
module.exports = cli;

//# sourceMappingURL=cli.js.map
