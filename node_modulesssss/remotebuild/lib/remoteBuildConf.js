// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
/// <reference path="../../typings/remotebuild.d.ts" />
/// <reference path="../../typings/nconf_extensions.d.ts" />
"use strict";
var os = require("os");
var path = require("path");
var HostSpecifics = require("./hostSpecifics");
var resources = require("../resources/resourceManager");
var tacoUtils = require("taco-utils");
var logger = tacoUtils.Logger;
var TacoGlobalConfig = tacoUtils.TacoGlobalConfig;
var UtilHelper = tacoUtils.UtilHelper;
var RemoteBuildConf = (function () {
    function RemoteBuildConf(conf, isUnitTest) {
        this.usingDefaultModulesConfig = false;
        this.conf = conf;
        var defaults = {
            serverDir: path.join(UtilHelper.tacoHome, "remote-builds"),
            port: 3000,
            secure: false,
            pinTimeout: 10,
            hostname: os.hostname()
        };
        defaults = HostSpecifics.hostSpecifics.defaults(defaults);
        conf.defaults(defaults);
        if (process.env.HOME) {
            // We don't get expansion of ~ or ~user by default
            // To support the simple case of "my home directory" I'm doing the replacement here
            // We only want to expand if the directory starts with ~/ not in cases such as /foo/~
            // Ideally we would also cope with the case of ~user/ but that is harder to find and probably less common
            var serverDir = conf.get("serverDir");
            conf.set("serverDir", serverDir.replace(/^~(?=\/|$)/, process.env.HOME));
        }
        this.remoteBuildConf = conf.get();
        TacoGlobalConfig.lang = this.lang;
        if (!(this.port > 0 && this.port < 65536)) {
            // Negated positve checks is important to catch NaN
            throw new Error(resources.getString("InvalidPortSpecified", this.port));
        }
        var serverMods = this.remoteBuildConf.modules;
        if (typeof (serverMods) !== "object" || Object.keys(serverMods).length === 0) {
            this.usingDefaultModulesConfig = true;
            if (isUnitTest) {
                this.remoteBuildConf.modules = {};
            }
            else {
                this.remoteBuildConf.modules = {
                    "taco-remote": { mountPath: "cordova" }
                };
            }
        }
    }
    Object.defineProperty(RemoteBuildConf.prototype, "config", {
        /**
         * @name config
         * @LOCTAG RemoteBuildConfConfig
         */
        // This getter is never used in code, but we do want to document the parameter.
        get: function () {
            return this.remoteBuildConf["config"];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteBuildConf.prototype, "serverDir", {
        /**
         * @name serverDir
         * @LOCTAG RemoteBuildConfServerDir
         */
        get: function () {
            return this.remoteBuildConf.serverDir;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteBuildConf.prototype, "lang", {
        /**
         * @name lang
         * @LOCTAG RemoteBuildConfLang
         */
        get: function () {
            return this.remoteBuildConf.lang;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteBuildConf.prototype, "port", {
        /**
         * @name port
         * @LOCTAG RemoteBuildConfPort
         */
        get: function () {
            return this.remoteBuildConf.port;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteBuildConf.prototype, "secure", {
        /**
         * @name secure
         * @LOCTAG RemoteBuildConfSecure
         */
        get: function () {
            return tacoUtils.ArgsHelper.argToBool(this.remoteBuildConf.secure);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteBuildConf.prototype, "pinTimeout", {
        /**
         * @name pinTimeout
         * @LOCTAG RemoteBuildConfPinTimeout
         */
        get: function () {
            return this.remoteBuildConf.pinTimeout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteBuildConf.prototype, "hostname", {
        /**
         * @name hostname
         * @LOCTAG RemoteBuildConfHostname
         */
        get: function () {
            return this.remoteBuildConf.hostname;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteBuildConf.prototype, "certExpirationDays", {
        /**
         * @name certExpirationDays
         * @LOCTAG RemoteBuildConfCertExpirationDays
         */
        get: function () {
            return this.remoteBuildConf.certExpirationDays;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteBuildConf.prototype, "modules", {
        // This is not something that should be specified on the command line directly, although it can be if you try hard enough
        get: function () {
            return Object.keys(this.remoteBuildConf.modules);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteBuildConf.prototype, "configFileLocation", {
        get: function () {
            return this.conf.stores.file && path.resolve(this.conf.stores.file.dir, this.conf.stores.file.file);
        },
        enumerable: true,
        configurable: true
    });
    RemoteBuildConf.prototype.get = function (prop) {
        return this.remoteBuildConf[prop];
    };
    RemoteBuildConf.prototype.set = function (prop, val) {
        this.remoteBuildConf[prop] = val;
    };
    RemoteBuildConf.prototype.moduleConfig = function (mod) {
        return this.remoteBuildConf.modules[mod];
    };
    RemoteBuildConf.prototype.setModuleConfig = function (mod, moduleConfig) {
        this.remoteBuildConf.modules[mod] = moduleConfig;
    };
    RemoteBuildConf.prototype.save = function () {
        // nconf.argv() adds some members to nconf that we do not want to save:
        // nconf.get("_") is the remaining command line arguments
        if (this.remoteBuildConf["_"]) {
            delete this.remoteBuildConf["_"];
        }
        // nconf.get("$0") is the command that started this process, e.g. "node remotebuild.js"
        if (this.remoteBuildConf["$0"]) {
            delete this.remoteBuildConf["$0"];
        }
        this.conf.merge(this.remoteBuildConf);
        this.conf.save(null);
        logger.log(resources.getString("SavedConfig", this.configFileLocation));
    };
    return RemoteBuildConf;
}());
var RemoteBuildConf;
(function (RemoteBuildConf) {
    ;
})(RemoteBuildConf || (RemoteBuildConf = {}));
module.exports = RemoteBuildConf;

//# sourceMappingURL=remoteBuildConf.js.map
